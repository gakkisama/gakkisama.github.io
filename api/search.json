[{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2021-08-14T03:03:15.228Z","categories_index":"","tags_index":"","author_index":"杰瑞"},{"id":"a9b7024603776f675b28198eeac54b9b","title":"第一","content":"","slug":"1st","date":"2020-08-15T10:49:36.000Z","categories_index":"","tags_index":"","author_index":"杰瑞"},{"id":"0037db2f20b465980cd5521f9576bbf4","title":"git在工作中的使用（二）","content":"工作 git的使用2问题描述：\n  现状：本地代码的commit版本为1，远程分支的代码版本为4；\n  操作：本地修改一些了一些文件（远程也有修改），想要提交到远程分支 \n​       —&gt; git 管理会提示有冲突，冲突不只是修改的有冲突的文件，还包括其他 2-4 commit 版本的代码 \n​       —&gt; 直接放弃了所有的不冲突文件的修改，并 push 到了远程分支【错误操作】\n\n\n解决思路：\n  由于这次是多人在同一分支开发，为了使其他人使用时不受阻\n  只要能够将远程分支上的代码回退到 commit4 版本，那么就能够保证远程分支的代码正确\n解决方案1：\ngit log/reflog  —&gt; 查看git操作记录，找到要回退的commit4 的[commit id]\ngit reset --hard [commit id] —&gt; 将本地的代码版本切回想要的 commit 版本【这只是本地分支上的操作】\ngit push origin HEAD --force —&gt; 强制提交一次，之前的 commit5 就会从远程删除【不好的操作】\n解决方案1 —&gt; 当前方案的确可以让远程分支上的代码正确，\n但是但是但是，其他开发者在 git pull 更新代码的时候，会提示本地代码版本提前于远程分支，然后拉不了最新的代码，\n只能让每个开发者都按照方案一操作一遍，以保持和远程版本的一致【bad idea】\n\n基于解决方案1的补救方案：\n  基于解决方案1，已知远程的分支代码是正确的，在master 上面拉一个新分支 —&gt; 合并当前分支 —&gt; 所有开发者切换到新分支 —&gt; 无痛继续开发\n解决方案2：【没有尝试】\n通过git revert是【用一次新的commit来回滚之前的commit】\n git log # 得到你需要回退一次提交的commit id\n git revert &lt;commit_id&gt; # 撤销指定的版本，撤销也会作为一次提交进行保存\n git commit -m &quot;.......&quot;\ngit push\n解决方案3：【没有尝试】\n","slug":"git在工作中的使用（二）","date":"2020-05-16T12:47:15.000Z","categories_index":"","tags_index":"Work","author_index":"杰瑞"},{"id":"2a2971797cca851bd9cf209160e0971c","title":"git在工作中的使用","content":"工作 git的使用1场景：工作里面经常使用git，自己拉分支，或者多人在一个分支上面开发；之前整理过git的使用方法，但是因为缺少实践，所以没有很深的印象\n参考：vscode安装git的插件，可以可视化工作区、暂存区还有代码diff\n总结：经常使用\ngit pull origin #先拉一下分支\ngit checkout branch # 切换到指定分支\ngit add .&#x2F;指定文件名（带路径）\ngit commit -m &#39;简要描述这次修改&#x2F;解决的问题&#39;\ngit reset HEAD~ #撤销上一次的commit操作\ngit status # 在每一步操作后都可以执行一下，看下现在的状态\ngit pull origin # 再拉一下远程代码，确认冲突\ngit push\ngit reset --soft HEAD^ # 可以成功撤销上一次commit，并且保留代码\n\ngit diff branch1 branch2                  # 显示出所有有差异的文件的详细差异\ngit diff branch1 branch2 --stat           # 显示出所有有差异的文件列表\ngit diff branch1 branch2 文件名(带路径)     # 显示指定文件的详细差异\n \ngit remote set-url origin http:&#x2F;&#x2F;新仓库地址   # 直接修改整个仓库的地址\ngit branch --set-upstream-to&#x3D;origin&#x2F;master  # 修改当前本地分支的跟踪\n\n代码迁移\n&#x2F;&#x2F;原代码仓库目录中执行\n&#x2F;&#x2F;1、重命名origin\ngit remote rename origin old-origin\n&#x2F;&#x2F;2、指定新仓库地址\ngit remote add origin http:&#x2F;&#x2F;新仓库地址\n&#x2F;&#x2F;3、上传代码到新仓库\ngit push origin --all\n&#x2F;&#x2F;4、上传tags\ngit push origin --tags\n&#x2F;&#x2F;5、切换分支-------------------------------笔试\ngit checkout -b 分支名\n&#x2F;&#x2F;6、上传分支\ngit push origin --all\n&#x2F;&#x2F;7、如果有多个分支，重复5和6\n\n① 创建新分支(本地和远程)\n&#x2F;&#x2F;1 创建dev_pg分支\ngit branch dev_pg  \n&#x2F;&#x2F;2 切换到新分支(dev_pg)\ngit checkout dev_pg\n&#x2F;&#x2F;3 创建并推送代码到远程分支(dev_pg)\ngit push origin dev_pg\n\ngit checkout -b 分支名：创建分支并切换\n&#x2F;&#x2F;相当于：\ngit branch 分支名   #创建分支\ngit checkout 分支名 #切换分支\n\n② 删除分支\n&#x2F;&#x2F;1 删除本地分支(dev_pg)\ngit branch -D dev_pg\n&#x2F;&#x2F;2 删除远程分支(dev_pg)\ngit branch -r -D origin&#x2F;dev_pg\n\n③ 查询分支\n&#x2F;&#x2F; 1 列出所有分支(本地及远程) -a（all的意思）\ngit branch -a\n&#x2F;&#x2F; 2 列出远程分支 -r(remote)\ngit branch -r \n&#x2F;&#x2F; 3 列出本地分支 -l(local)\ngit branch -l\n\n④ 查询本地git状态\ngit status\n\n⑤ 合并代码\n&#x2F;&#x2F;1 切换到合并分支 (例如dev分支开发，需要合并到master分支。则先切换到master分支)\ngit checkout master\n&#x2F;&#x2F;2 合并代码\ngit merge dev\n&#x2F;&#x2F;3 查看是否有冲突\ngit status\n&#x2F;&#x2F;4 再次拉一次代码\ngit pull origin master\n&#x2F;&#x2F;5 推送到远程\ngit push origin master","slug":"git在工作中的使用","date":"2018-05-14T12:41:34.000Z","categories_index":"","tags_index":"Work","author_index":"杰瑞"}]